2.Stratégies gagnantes au Morpion:
----------------------------------

On importe copy et math (pour copier les grilles (push pop depuis les coups en descendant et choisir en remontant) et pour manipuler les math.inf et -math.inf).

1-afficher la grille et vérifier depuis la grille et un joueur == 'X' || 'O' a gagné:
a->
for i in range(3):
	for j in range(3):
		print(grille[i][j],end=" ")
	print()
Rq: le remplissage de la grille se ferait dans la fonction jouer() principale.
b->
On gagne si en diagonale double 3 horizentales 3 verticales
if grille[0][0] == grille[1][1] == grille[2][2] == joueur : return True
sinon avec les indices: 0 2, 1 1, 2 0 == joueur bien sûr.
Autre façon de gagner avec les 6 autres autre que les 2 diagonales:
for i in range(3):#toutes les lignes(paramétrage)
if(grille[i][0] == grille[i][1] == grille[i][2]) return True
sinon avec les 3 triplets d'indices (direct pas fct(i)):
--- 0,0 1,0 2,0 ou: 0,1 1,1 2,1 soit: 0,i 1,i 2,i pour i in range(3) (de 0 à 2). 
--- 0,0 0,1 0,2 ou: 1,0 1,1 1,2 soit: i,0 i,1 i,2 pour i in range(3) (de 0 à 2).
3 verticales 3 horizentales + 2 diagonales
=>2 boucles + 2 tests et à la fin: return False.
(les autres tests retournent True)

2-savoir les coups valides et évaluer la grille depuis le joueur(le signe):
a->
coups est une liste de coordonnées.
on parcourt toute la grille si dans (i,j) on a la valeur de la grille == "-" on fait coups.append((i,j)). Nouveau coup dans la liste coups. On retourne coups à la fin.
b->
La fonction d'évaluation avec grille et joueur:
Si verifier_gagnant(grille,joueur), on retourne 1
Sinon verifier_gagnant(grille,autre_joueur(joueur)) on retourne -1
sinon retour de 0. 
c->fonction autre_joueur selon la valeur de $1.
d->match_nul:
depuis la grille(instance) si il existe une case avec "-" return True
return False à la sortie complète de la double boucle.

3-On implémente l'algo minimax après:
--afficher_grille(grille)
--match_nul(grille)
--gagnant(grille,joueur)
--autre_joueur(joueur)
--coups_possibles(grille)
--evaluer(grille,joueur)

on doit savoir le meilleur score et le meilleur coup.
(-1,None) avec "X" gagnant et (1,None) avec "O" gagnant.
match nul (0,None).

ça prend en args: grille,joueur l'instance et le joueur qui va jouer et cela va retourner le meilleur score et le meilleur coup le premier soit le deuxième.

Si le joueur est "O", on initialise le meilleur_score à -math.inf et signe=1 sinon math.inf et signe=-1.

Après:
on parcourt la grille si "-" on la remplit avec joueur (le signe).
Le score vaut: signe*minimax(grille,"O" if joueur=="X" else "X")[0] pour récupérer le meilleur score. (négatif dans le cas du joueur non ia "X").
si "-" dans grille[i][j]((reprise!)) ; si:
score*signe > meilleur_score*signe:
	meilleur_coup=(i,j)
	meilleur_score=score
on retourne: (meilleur_score, meilleur_coup). 

C'est fini, reste l'algo jouer .

On remplit la grille avec que des "-" partout. on l'affiche ; la ligne=int(input(String)) de même pour la colonne. Si l'emplacement != "-" print(avertissement), continue. tour="X" ici. on met "X" qui est tour dans la grille à la ligne et à la colonne. puis avec la grille et le joueur tour "X" on vérifie gagnant on affiche la grille et on affiche après le joueur "X" a gagné! break.
si match_nul(grille), on l'affiche on fait print(Match nul !") break tour="O" else:
print(Tour de l'IA(O)....")
coup=minimax(grille,"O")[1]. Comme ça.
grille[coup[0]][coup[1]]="O"
si gagnant break avec les bons messages sinon match nul on affiche la grille avec $1 seulement: grille. On affiche Match nul puis break puis tour="X" while True dans la même indentation. 
if __name__!=main:
	jouer()
voilà.
FIN.
legal_moves retourne tous les coups valides depuis une instance de jeu donnée. 
is_game_over retourne True c'est à dire c'est fini si il y a un alignement Faux si il y a encore une cellule vide sinon ça retourne True, le game est terminé car aucune cellule n'est vide ou bien il existe aucun alignement. 
QST1:
>
Pour explorer toutes les parties possibles au Morpion, on peut utiliser une fonction récursive qui, à chaque étape, va parcourir tous les coups possibles avec legal_moves(), en jouant chaque coup avec push() et en vérifiant si le jeu est terminé avec is_game_over(). Si le jeu est terminé, on peut ajouter le résultat de la partie dans une liste. Si le jeu n'est pas terminé, on appelle récursivement la fonction pour explorer les parties possibles à partir de l'état actuel du jeu.
>
Le nombre de parties possibles au Morpion est de 255168. Le nombre de noeuds dans l'arbre de recherche est le nombre de parties possibles multiplié par le nombre moyen de coups dans une partie (environ 5). Donc, le nombre de noeuds est d'environ 1.3 million. Le temps pour explorer toutes les parties dépend de la vitesse de l'ordinateur utilisé, mais cela peut prendre plusieurs minutes.
(ATTENTION)
QST2.
>
En utilisant une recherche exhaustive avec une profondeur maximale pour le Morpion, on peut trouver toutes les combinaisons gagnantes possibles pour les joueurs X et O. Si nous utilisons cette stratégie, nous pouvons trouver une stratégie gagnante pour l'un des deux joueurs ou déterminer que la partie est destinée à se terminer par une égalité.

Cependant, la recherche exhaustive avec une profondeur maximale est très coûteuse en termes de temps et de ressources de calcul, surtout lorsque le nombre de possibilités de jeu est très élevé. Pour un jeu aussi simple que le Morpion, la recherche exhaustive est réalisable, mais pour des jeux plus complexes, une telle stratégie est souvent inapplicable.
QST3.
>
Pour améliorer la recherche de stratégie gagnante, vous pouvez utiliser une technique appelée "élagage alpha-beta". L'élagage alpha-beta est une méthode de recherche dans les arbres de jeu qui permet d'éviter de parcourir certaines branches inutiles de l'arbre de recherche en utilisant des bornes supérieures et inférieures pour les valeurs des noeuds.

L'élagage alpha-beta fonctionne en comparant les valeurs des noeuds à une valeur maximale (appelée "alpha") et une valeur minimale (appelée "beta"). Si la valeur d'un noeud est inférieure à alpha ou supérieure à beta, alors il est possible d'éliminer cette branche de l'arbre de recherche car elle ne contient pas de solution optimale.

En implémentant l'élagage alpha-beta dans votre recherche de stratégie gagnante, vous devriez être en mesure de réduire le nombre de noeuds visités, ce qui devrait réduire le temps nécessaire pour trouver une solution.

Il est important de noter que l'élagage alpha-beta conserve l'admissibilité de la recherche, ce qui signifie que la solution trouvée sera toujours optimale.

Pour comparer les temps et le nombre de noeuds nécessaires pour la recherche, vous pouvez exécuter la recherche de base (sans élagage alpha-beta) et la recherche améliorée (avec élagage alpha-beta) sur plusieurs parties différentes et enregistrer le temps et le nombre de noeuds visités pour chaque recherche. Ensuite, vous pouvez comparer les résultats pour déterminer l'impact de l'élagage alpha-beta sur les performances de la recherche.

=>Résumé:
QST1.
____Explorer toutes les parties possibles avec une nouvelle fonction dans starter-tictactoe.py.
QST2.
____On multiplie le nombre trouvé par le nombre moyen de coups de partie => 1.3 million nombre de noeuds à la fin.
QST3.
____Comparaison des performances avec élagage alpha-bêta.


-------------------------------------------------------------------------------




